translation_task:
  description: >
    The buyer wants to purchase a product from 1688.com. This is the query they provided: "{query}".
    First, evaluate the query and understand the buyer's intent. Then generate a precise query in Chinese suitable for effective searches on 1688.com.
    The query should be concise and to the point, and should not be too long.
  expected_output: >
    A translated query string that accurately reflects the buyer's intent.
  agent: translation_agent

search_task:
  description: >
    Search for the translated query on 1688.com using the provided tool. Evaluate the search results. 
    Pay close to product titles in the tool output. Select top 5 candidate items that best match the initial buyer query "{query}".
    If more than 5 candidate items are found, pay attention to the item repurchase rate, item score, orders_count. Do not select items with is_p4p:true.
  expected_output: >
    A list with 5 candidate items that best match the translated query. 
    For each item, include the following details:
    - item_id
    - title
    - product_url
    - repurchase_rate
    - item_score
    - orders_count
  agent: search_expert
  dependencies:
    - translation_task

detail_extraction_task:
  description: >
    Retrieve comprehensive details for each candidate item from the search results using the provided tool.
    Evaluate item variants provided in the "skus" field. Property definition is provided in the" sku_props" field. 
    Keep only one product variant that meet the buyer's requirements: "{query}"
  expected_output: >
    A list with candidate items with more information. For each item, include the following details:
    - item_id
    - title
    - product_url
    - repurchase_rate
    - item_score
    - orders_count
    - props_names (selected variant)
    - price (price for the selected variant)
  agent: detail_extraction_agent
  dependencies:
    - search_task

ranking_task:
  description: >
    Perform evaluation candidate products based on relevance to the original query ("{query}"), product score, orders_count, repurchase_rate, price.
  expected_output: >
    A ranked list of top 5 products with their details.
    - item_id
    - title
    - product_url
    - repurchase_rate
    - item_score
    - orders_count
    - props_names (selected variant)
    - price (price for the selected variant)

  agent: ranking_agent
  dependencies:
    - detail_extraction_task

json_conversion_task:
  description: >
    Convert the ranked products list into a clean JSON array containing only the essential information.
  expected_output: >
    A JSON array where each item contains: name, price, MOQ, and URL.
    Remove all markdown formatting and unnecessary text.
    The output must be valid JSON that can be parsed by JSON.parse().

    "output_json": {
                "items": [
                    {
                        "item_id": "string",
                        "title": "string",
                        "price": "number",
                        "product_url": "string",
                        "repurchase_rate": "number",
                        "item_score": "number",
                        "orders_count": "number",
                        "props_names": "string",
                        "price": "number"
                    }
                ],
                "metadata": {
                    "query": "string",
                    "timestamp": "string"
                }
            }
   
  agent: json_conversion_agent
  dependencies:
    - ranking_task